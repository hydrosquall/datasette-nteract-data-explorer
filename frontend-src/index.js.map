{"mappings":"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","sources":["frontend-src/main.tsx","frontend-src/DatasetteDataExplorer.tsx"],"sourcesContent":["import { render, h } from \"preact\";\n\nimport { DatasetteDataExplorer } from \"./DatasetteDataExplorer\";\n\nconst rootElement = document.getElementById(\"root\");\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  let mountElement, jsonUrl;\n\n  const jsonEl = document.querySelector(\".export-links a[href*=json]\");\n  if (jsonEl) {\n    jsonUrl = jsonEl.getAttribute(\"href\");\n    // Create elements for adding graph tool to page\n    mountElement = document.createElement(\"div\");\n    let table = document.querySelector(\"table.rows-and-columns\");\n    if (table && table.parentNode) {\n      table.parentNode.insertBefore(mountElement, table);\n    }\n  }\n\n  if (jsonUrl) {\n    // Add _shape=array\n    jsonUrl += jsonUrl.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n    jsonUrl += \"_shape=array\";\n    if (mountElement) {\n      render(<DatasetteDataExplorer dataUrl={jsonUrl} />, mountElement);\n    } else {\n      console.log(\"Couldn't find anybody\");\n    }\n    // ReactDOM.render(\n    //   <DatasetteVega base_url={jsonUrl} onFragmentChange={onFragmentChange} />,\n    //   visTool\n    // );\n  }\n});\n","import { h, FunctionComponent } from \"preact\";\n// import useEffect and useState from preact hooks\nimport { useEffect, useState } from \"preact/hooks\";\n\n\nimport DataExplorer from \"@nteract/data-explorer\";\n\nconst basicData = {\n  schema: {\n    fields: [\n      {\n        name: \"index\",\n        type: \"integer\",\n      },\n      {\n        name: \"param_session\",\n        type: \"object\",\n      },\n    ],\n    primaryKey: [\"index\"],\n  },\n  data: [\n    {\n      index: 0,\n      param_session: [\n        {\n          name: \"foo\",\n        },\n        {\n          name: \"foo\",\n        },\n      ],\n    },\n  ],\n};\n\n//  DatasetteExplorer\n\ninterface DatasetteDataExplorerProps {\n  dataUrl: string;\n}\n\n\ntype DatasetteRow = Record<string, number | string>\ntype DatasetteTable = DatasetteRow[];\n\n\nconst dataFrameToFrictionlessSpec = (table: DatasetteTable) => {\n\n  if (table.length === 0) {\n    return null;\n  }\n\n  // we assume all rows have same keys\n  const fieldNames = Object.keys(table[0]);\n\n  const fields = fieldNames.map((col) => {\n\n    if (table.every(r => typeof r[col] === 'number' && Number.isInteger(r[col]))) {\n      return { name: col, type: \"integer\" };\n    }\n    if (table.every((r) => typeof r[col] === \"number\")) {\n      return { name: col, type: \"number\" };\n    }\n\n    // if (col.meta.type === \"datetime\") {\n    //   return { name: id, type: \"datetime\" };\n    // }\n\n    // Resolve upstream bug with nteract to fix table display\n    // https://github.com/nteract/data-explorer/pull/41\n    // if (col.kind === \"string\") {\n    //   return { name: id, type: \"string\" };\n    // }\n\n    return { name: col, type: \"string\" };\n\n    // if (col.kind === \"object\" && col.meta.type === \"unknown\") {\n    //   return { name: id, type: \"any\" };\n    // }\n    // return { name: id, type: \"any\" };\n  });\n\n  const data = {\n    schema: {\n      fields,\n      primaryKey: [],\n    },\n    data: table,\n    // data: table.map((r: any, i: number) => {\n    //   const row = {\n    //     ...r,\n    //   };\n\n    //   // FillNa - // Data integrity\n    //   // We can remove this if we enforce data quality checks\n    //   // higher up in the data pipeline\n    //   // fields.forEach((field) => {\n    //   //   if (row.type === \"string\" && row[field.name] === null) {\n    //   //     row[field.name] = \"\";\n    //   //   }\n    //   // });\n    //   return row;\n    // }),\n  };\n\n  return data;\n};\n\n\n\n\n// TODO: allow setting datatype per column and/or doing light parsing.\n\nexport const DatasetteDataExplorer:  FunctionComponent<DatasetteDataExplorerProps> = (props) => {\n\n  console.log(\"DatasetteDataExplorer\", props);\n\n  // fetch data from props.dataUrl in a useEffect hook\n  const [data, setData] = useState<any>(null);\n\n  useEffect(() => {\n    fetch(props.dataUrl)\n      .then((response) => response.json())\n      .then((json) => {\n        // const rawData = json;\n        const parsedData = dataFrameToFrictionlessSpec(json)\n\n        setData(parsedData);\n      });\n  }, [props.dataUrl]);\n\n  console.log({ data });\n\n\n  return (\n    <div className=\"DatasetteDataExplorer\">\n      {data && <DataExplorer data={data ?? basicData} />};\n    </div>\n  );\n}\n"],"names":[],"version":3,"file":"index.js.map"}